HTTPStatusCodeHandling.swift
	public func httpOptionalStatusCodeHandler<MetadataType, DataType>(meta: MetadataType?, payload: DataType)
    throws
	public func httpRequiredStatusCodeHandler<MetadataType, DataType>(meta: MetadataType?, payload: DataType)
    throws
GenericDataProcessingTransaction.swift
	public var url: NSURL { return wrappedTransaction.url }
	public let processData: DataProcessingFunction
	public init(wrapping: WrappedTransactionType, dataProcessor: DataProcessingFunction)
	public func executeTransaction(completion: Callback)
URLTransaction.swift
	public class URLTransaction: DataTransaction
	public var url: NSURL { return request.URL! }
	public let request: NSURLRequest
	public let uploadData: NSData?
	public let sessionConfiguration: NSURLSessionConfiguration
	public init(url: NSURL, uploadData: NSData? = nil, sessionConfiguration: NSURLSessionConfiguration = .defaultSessionConfiguration())
	public init(request: NSURLRequest, uploadData: NSData? = nil, sessionConfiguration: NSURLSessionConfiguration = .defaultSessionConfiguration())
	public func executeTransaction(completion: Callback)
JSONTransaction.swift
	public class JSONTransaction<JSONDataType>: WrappingDataTransaction
	public var url: NSURL { return wrappedTransaction.url }
	public var jsonReadingOptions = NSJSONReadingOptions(rawValue: 0)
	public var payloadProcessingFunction: JSONPayloadProcessor = requiredPayloadProcessor
	public var metadataProcessingFunction: MetadataProcessor?
	public init(url: NSURL, uploadData: NSData? = nil)
	public init(request: NSURLRequest, uploadData: NSData? = nil)
	public init(wrapping: WrappedTransactionType)
	public func executeTransaction(completion: Callback)
	public class JSONOptionalTransaction<T>: JSONTransaction<T?>
	public override init(request: NSURLRequest, uploadData: NSData? = nil)
	public override init(url: NSURL, uploadData: NSData? = nil)
ApiDocTransaction.swift
	public class ApiDocTransaction<T>: JSONTransaction<T>
	public override init(request: NSURLRequest, uploadData: NSData? = nil)
	public override init(url: NSURL, uploadData: NSData? = nil)
	public class ApiDocOptionalTransaction<T>: JSONOptionalTransaction<T>
	public override init(request: NSURLRequest, uploadData: NSData? = nil)
	public override init(url: NSURL, uploadData: NSData? = nil)
JSONPayloadProcessing.swift
	public func optionalPayloadProcessor<T>(jsonObject: AnyObject?)
    throws
    -> T?
DataTransactionError.swift
	case DataFormatError(String)
